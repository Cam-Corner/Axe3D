#version 330 core

out vec4 FragmentColour;

in vec2 TextCoords;
in vec3 VertexPositionPassed;
in vec3 VertexNormalPassed;

struct sMaterial
{
	sampler2D Texture_Diffuse0;	
	bool HasDiffuseTexture0;
	
	sampler2D Texture_Specular0;
	bool HasSpecularTexture0;
	
	vec3 Diffuse;
	vec3 Specular;
	vec3 Ambient;
	float Shininess;
};

struct sLight
{
	vec3 Intensity;
	vec3 Position;
	float Range;
};

uniform sLight Light[50];
uniform int NumberOfLights;
uniform vec3 AmbientLightIntensity;

uniform sMaterial Material;

vec4 LightCalculation(sLight Light);

void main()
{	
	vec4 FinalDiffuseAndSpecularColour;
	
	for(int i = 0; i < NumberOfLights; i++)
	{	
		FinalDiffuseAndSpecularColour += LightCalculation(Light[i]);
	}	
	vec4 FinalAmbientColour;

	if(Material.HasDiffuseTexture0)
	{
		FinalAmbientColour= vec4((AmbientLightIntensity), 1) * texture(Material.Texture_Diffuse0, TextCoords);
	}
	else
	{
		FinalAmbientColour = vec4((AmbientLightIntensity * Material.Diffuse), 1);
	}
	
	vec4 FinalColour = FinalAmbientColour + FinalDiffuseAndSpecularColour;
	
	
	FragmentColour = FinalColour;	
}


vec4 LightCalculation(sLight Light)
{
	//Calculate attenuation
	float Attenuation = smoothstep(Light.Range, Light.Range / 2, length(Light.Position - VertexPositionPassed));
	
	vec4 Diffuse;
	vec4 Specular;
	
	//Calculate Diffuse
	vec3 N = normalize (VertexNormalPassed);
	vec3 L = normalize(Light.Position - VertexPositionPassed);
	
	float Diffuse_Intensity = max(0, dot(L, N));
	
	if(Material.HasDiffuseTexture0)
	{
		Diffuse = texture(Material.Texture_Diffuse0, TextCoords) * vec4(Light.Intensity * Material.Diffuse * Diffuse_Intensity, 1);
	}
	else
	{
		Diffuse = vec4(Light.Intensity * Material.Diffuse * Diffuse_Intensity, 1);
	}	
	
	vec4 FinalColour = (Diffuse + Specular) * Attenuation;
	
	return FinalColour;	
}


